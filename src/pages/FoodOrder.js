import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

const FoodOrder = () => {
  const [tableId, setTableId] = useState(1);
  const [orders, setOrders] = useState([]);
  const [updateOrder, setUpdateOrder] = useState(false);
  const [allBillPrices, setAllBillPrices] = useState(0);
  const navigate = useNavigate();
  const tableList = [...Array(15).keys()];

  // fire api to get status
  const updateOrderStatus = async (orderId) => {
    const statusUpdate = {
      order_id: orderId,
      status: "DONE",
    };
    try {
      await fireUpdateStatus(statusUpdate);
      setUpdateOrder(true);
    } catch (err) {
      console.log(err);
    }
  };
  const fireUpdateStatus = async (itemUpdate) => {
    return axios.post(
      "https://sprinttech-food-menu-api-iinykauowa-uc.a.run.app/update-order-status",
      itemUpdate
    );
  };
  // fire api to get status end ####

  const checkBillsAll = () => {
    const sumPrices = orders.reduce((acc, r) => {
      return (acc += r.total_price);
    }, 0);
    console.log("sumPrices", sumPrices);
    setAllBillPrices(sumPrices);
  };

  const payBills = () => {
    setOrders([]);
    setAllBillPrices(0);
  };

  // fire api to get order ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ table
  useEffect(() => {
    axios({
      method: "post",
      url: "https://sprinttech-food-menu-api-iinykauowa-uc.a.run.app/get-orders-by-table",
      data: {
        table_id: tableId,
      },
    })
      .then((res) => {
        console.log("res", res.data);
        setOrders(res.data);
      })
      .catch((error) => {
        console.log("error:", error);
      });
  }, [tableId, updateOrder]);
  // fire api to get order ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ table end ####

  // fuction ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô  .catch ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏°‡∏≠
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏Å error ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏≥ production
  return (
    <div className="px-6 py-3 bg-red-200">
      <div className="bg-red-500 p-2">
        <h1 className="text-center text-white">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h1>
      </div>
      <div className="mt-5">
        <p className="mb-3 text-xl bg-rose-300 w-1/3 p-2 text-center text-white rounded-lg">
          ‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞ : {tableId}
        </p>
        {/* add map here */}
        <div className="grid grid-cols-5 gap-2">
          {tableList.map((numbertable, idx) => (
            <button
              onClick={() => setTableId(numbertable + 1)}
              key={idx}
              className="bg-rose-500 text-center p-2 rounded-md text-white"
            >
              {numbertable + 1}
            </button>
          ))}
        </div>
      </div>
      {/* component to show detail about order menu and calculate price*/}
      <div className="mt-5">
        <p className="text-xl">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ : {orders.length}</p>
      </div>
      <div className="flex items-center justify-between">
        <button
          className="mt-6 bg-gray-500 p-2 rounded-[10px] text-white"
          onClick={() => navigate("/")}
        >
          Back To Home Page {"<<"}{" "}
        </button>
        <button
          onClick={() => checkBillsAll()}
          className="mt-6 bg-rose-400 p-2 rounded-[10px] text-white"
        >
          ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•‡∏£‡∏ß‡∏°
        </button>
      </div>
      {/* ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•‡∏£‡∏ß‡∏° */}

      {orders.length === 0 && (
        <div className="my-9">
          <span className="text-xl text-gray-500 flex justify-center">
            ---- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ü¶Ä ----
          </span>
        </div>
      )}
      {allBillPrices !== 0 && (
        <div className="mt-6 bg-orange-200 p-4 rounded-lg">
          <div className="text-lg">
            ‡πÇ‡∏ï‡πä‡∏∞ {tableId} ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° =
            <span className="text-rose-600"> ‡∏ø {allBillPrices}</span>
          </div>
          <div>
            <button
              onClick={() => payBills()}
              className="bg-rose-400 text-white p-2 rounded-lg my-3 text-xl"
            >
              ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
            </button>
          </div>
        </div>
      )}
      {/* ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•‡∏£‡∏ß‡∏° */}
      {orders?.map((order) => (
        <div
          key={order.order_id}
          className="px-4 pt-5 mt-3 bg-rose-100 rounded-xl"
        >
          {/* <button className="bg-rose-400 text-white p-2 rounded-lg my-3 text-xl">
            ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•
          </button> */}

          <div className="flex items-center gap-2 justify-between">
            <p>‡πÇ‡∏ï‡πä‡∏∞ {tableId} </p>
          </div>
          <div>
            <div>
              <p>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {order.order_id}</p>
              <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {order.status}</p>
            </div>
            {/* add .map() here */}
            {order?.items?.map((item, idx) => {
              return (
                <div
                  key={`${item.name} ${idx}`}
                  className="flex justify-between"
                >
                  <div>
                    <p>{item.name}</p>
                  </div>
                  <div className="flex">
                    <p>{item.price}</p>
                    <p>x</p>
                    <p>{item.quantity}</p>
                  </div>
                </div>
              );
            })}
          </div>
          <div className="flex justify-end">
            <p className="text-rose-500 my-3"> ‡∏£‡∏ß‡∏° : {order.total_price}</p>
          </div>
          {order.status === "WAITING" && (
            <button
              onClick={() => updateOrderStatus(order.order_id)}
              className="bg-rose-400 text-white p-2 rounded-lg my-3 text-xl"
            >
              ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            </button>
          )}
        </div>
      ))}
    </div>
  );
};

export default FoodOrder;
